module sacm-collection {
	namespace "http://cisecurity.org/yang/sacm-collection";
	prefix "sacm-collection";

	//import "ietf-yang-types" {
	//	prefix "yang";
	//}

	organization "Center for Internet Security";
	contact yang@cisecurity.org;
	description "";
	revision 2018-07-14 {
		description 
			"Initial Version; Types, Groupings, and any other constructs common to SACM.";
	}


	// Typedefs
	// Groupings
	grouping collection-type {
		description "Describes the unique combination of namespace and collection type, i.e. unix/file or windows/file";

		leaf family {
			type enumeration {
				enum WINDOWS;
				enum LINUX;
				enum UNIX;
				enum CISCO-IOS;
				enum CISCO-ASA;
				enum MACOSX;
			}
		}

		leaf type {
			type string;
		}
	}

	grouping base-field {
		description "The required attributes for collection of system characteristics for the specified collection-type";

		leaf name {
			type string;
		}
		leaf datatype {
			type enumeration {
				enum STRING;
				enum INTEGER;
				enum VERSION;
				enum BOOLEAN;
				//more
			}
		}
		leaf operation {
			type enumeration {
				enum EQUALS;
				enum NOT-EQUAL;
				enum IEQUALS;
				enum INOT-EQUAL;
				enum GREATER-THAN;
				enum GREATER-THAN-OR-EQUAL;
				enum LESS-THAN;
				enum LESS-THAN-OR-EQUAL;
				//more
			}
		}
		leaf value {
			type string;
		}
	}

	grouping collection-fields {
		description "Fields used for collecting system characteristics";

		//container collection-fields {
			list collection-field {
				key "name";

				uses base-field;
			}
		//}
	}

	grouping filter {
		description "Describes the methods for filtering collected items based on expected field characteristics";

		container filter-fields {
			list filter-field {
				key "name";

				uses base-field;
			}
		}
	}

	grouping set {
		description "Combinatorial operation on the collection of multiple collection objects";

		leaf set-combination {
			type enumeration {
				enum UNION;
				enum COMPLEMENT;
				enum INTERSECTION;
			}
		}

		leaf object1 {
			type leafref {
				path "/collections/collection/collection-id";
			}
		}

		leaf object2 {
			type leafref {
				path "/collections/collection/collection-id";
			}
		}
	}

	// Containers
	container collections {
		list collection {
			key "collection-id";

			leaf collection-id {
				type int32;
			}

			container collection-type {
				uses collection-type;
			}

			choice collection-strategy {
				case fields {
					container collection-fields {
						uses collection-fields;
					}
				}
			
				case sets {
					container set {
						uses set;
					}
				}
			}

			container filter {
				uses filter;
			}
		}
	}
}
