module microsoft-windows-collection {
	namespace "http://cisecurity.org/yang/microsoft-windows-collection";
	prefix mswin-col;

	import "ietf-yang-types" {
		prefix "yang";
	}

	// Do any other modules need inclusion?

	organization "Center for Internet Security";
	contact yang@cisecurity.org;
	description "";
	revision 2018-06-06 {
		description 
			"Initial Version; Describing methods for collecting information that can be collected from Microsoft Windows systems";
	}

	typedef entity-datatype {
		description "The enumeration of valid datatypes";
		type enumeration {
			enum binary;
			enum boolean;
			enum evr_string;
			enum debian_evr_string;
			enum fileset_revision;
			enum float;
			enum ios_version;
			enum integer;
			enum ipv4;
			enum ipv6;
			enum string;
			enum version;
			enum record;
	}

	typedef entity-operation {
		description "The enumeration of valid operations";
		type enumeration {
			enum equals;
			enum not-equal;
			enum case-insensitive-equals;
			enum case-insensitive-not-equal;
			enum greater-than;
			enum greater-than-or-equal-to;
			enum less-than;
			enum less-than-or-equal-to;
			enum bitwise-and;
			enum bitwise-or;
			enum pattern-match;
			enum subset-of;
			enum superset-of;
	}

	typedef entity-logical-operator {
		description "Operators describing the logical combination of results";
		type enumeration {
			enum AND {
				description "";
			}
			enum OR {
				description "";
			}
			enum XOR {
				description "";
			}
			enum ONE {
				description "";
			}
		}
	}

	//
	// Groupings
	//
	grouping entity-base-type {
		leaf name {
			type string;
		}
		leaf datatype {
			type entity-datatype;
		}
		leaf operation {
			type entity-operation;
		}
		leaf nil {
			type boolean;
		}
	}

	grouping entity-int-type {
		uses entity-base-type;

		leaf entity-value {
			type int32;
		}
	}

	grouping entity-string-type {
		uses entity-base-type;

		leaf entity-value {
			type string;
		}
	}

	grouping entity-boolean-type {
		uses entity-base-type;

		leaf entity-value {
			type boolean;
		}
	}

	grouping entity-record-field-type {
		description "";

		leaf name {}
		leaf value {}
	}

	grouping entity-record-type {
		description "";

		uses entity-base-type;

		list fields {
			description "";
			key "name";
			uses record_field;
		} 
	}

	//
	// Types
	//


	/*
		<collections>                // list
			<collection>             // container
				<namespace></namespace> // Enum
				<type></type>        // string
				<keys>               // list
					<key>            // container
						<name>
						<datatype>   // Enum
						<operation>  // Enum
						<nil>        // boolean
						<value>
					</key>
				</keys>

				<behaviors>          // list
					<behavior>       // container
						<name>
						<datatype>   // Enum
						<value>
					</behavior>
				</behaviors>
			</collection>
		</collections>

		<evaluations>
			<evaluation>
				<existence-check>
				<item-check>
				<comparison>
					<fields>
						<field>
							<name>
							<datatype>
							<operation>  // Enum, with new value "nil"
							<value>
						</field>
					</fields>
				</comparison>
			</evaluation>
		</evaluations>

		<system-characteristics>
			<item>
				<namespace>
				<type>
				<unique-identifier>
				<fields>
					<field>
						<name>
						<datatype>
						<nil>
						<value>
					</field>
				</fields>
			</item>
		</system-characteristics>
	*/
}